@model HotelGuestVerifyByPolice_CMS.Models.HotelReg
@{
    ViewBag.Title = "Hotel Registration";
   Layout = "";
}
<link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7w-l0RWEUVqhXyshtsgdkqJDNxaKQ5lY&callback=initMap" async defer></script>

<style>
    wordtune-read-extension{display:none !important}
    body{height:100%;
    width:100%;}
    .px-6{
        padding-right: 60px;
        padding-left: 60px;
    }
    .nav-bg{
        background-image: linear-gradient( 1deg, hsl(255deg 86% 72%) 0%, hsl(249deg 89% 74%) 11%, hsl(242deg 92% 75%) 24%, hsl(236deg 94% 75%) 38%, hsl(230deg 95% 74%) 52%, hsl(226deg 95% 74%) 64%, hsl(223deg 95% 73%) 74%, hsl(220deg 93% 73%) 82%, hsl(217deg 91% 72%) 89%, hsl(215deg 89% 72%) 95%, hsl(213deg 86% 72%) 100% )
    }

        .nav-bg p a span {
            color: #fff !important;
            font-size: 18px;
            font-weight:600;
        }

    .form-control {
      
        border: none !important;
        border-bottom: 1px solid #787878 !important;
        border-radius: 0px !important;
       /*  color: #9979f6 !important; */
        margin-right: 5% !important;
        margin-bottom:18px;
    }

    .form-group {
        width: 45% !important;
        margin-right: 5% !important;
    }

    #form-heading{
        margin-left:20px;
        color:#fff;
        background: #4594fc;
        margin-bottom:0px;
        width:22%;
        padding:10px;
        border-top-left-radius:10px;
        border-top-right-radius:10px;
        padding-left:25px;
    }

    .form-control:focus {
        color: #212529;
        background-color: #fff !important;
        border-color: none;
        outline: 0;
        box-shadow: none !important;
        border-bottom: 2px solid #9979f6 !important;
    }

    ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
        color: #212529 !important;
        opacity: 1; /* Firefox */
    }

    .modal-open .modal {
       
        top: 25%;
    }

    input[type=checkbox] {
        display: none;
    }
    #verified {
        display: none;
        position: absolute;
        top: 5px;
        right: 0px;
    }

    #verifyModel {
        position: absolute;
        top: 5px;
        right: 0px;
    }

    .customBtn {
        border-radius: 0px;
        padding: 10px;
    }

    form input {
        display: inline-block;
        width: 50px;
        height: 50px;
        text-align: center;
    }
</style>
@using (Html.BeginForm())

{

    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="background:#ebebeb;padding-bottom:20px">

        <div class="px-6 nav-bg" style="width:100%;height:50px">
            <p class="d-flex justify-content-between pt-3">
                <a href="../home">   <span>Home</span></a>
                <a href="./HotelLogin"> <span>Login</span></a>
            </p>

      </div> 

      
      <div class="px-6 pt-3">
            <h4 id="form-heading">New Hotel Registration</h4>
            <div style="background:#fff;border-radius:5px" class="px-5 py-4">       
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="d-flex">
        <div class="form-group">

          @*   @Html.LabelFor(model => model.firstName, htmlAttributes: new { @class = "control-label" }) *@

                        <div class="form-input">

                            @Html.EditorFor(model => model.firstName, new { htmlAttributes = new { @class = "form-control" ,placeholder = "First Name"} })

                @Html.ValidationMessageFor(model => model.firstName, "", new { @class = "text-danger" })

            </div>

        </div>

        <div class="form-group">

           @*  @Html.LabelFor(model => model.lastName, htmlAttributes: new { @class = "control-label" }) *@

                        <div class="form-input">

                            @Html.EditorFor(model => model.lastName, new { htmlAttributes = new { @class = "form-control",placeholder = "Last Name" } })

                @Html.ValidationMessageFor(model => model.lastName, "", new { @class = "text-danger" })

            </div>

                </div>
            </div>
            <div class="d-flex">

        <div class="form-group">

         @*    @Html.LabelFor(model => model.mobile, htmlAttributes: new { @class = "control-label col-md-2" }) *@
                        <input type="hidden" id="getotp" value="" />
                        <div class="form-input" style="position:relative">

                            @Html.EditorFor(model => model.mobile, new { htmlAttributes = new { @class = "form-control",placeholder = "Mobile Number",  @minlength = "10", @maxlength = "10"} })
                            @Html.CheckBoxFor(model => model.isMobileVerify, new { htmlAttributes = new { style = "display:none"} })
                            @Html.ValidationMessageFor(model => model.mobile, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.isMobileVerify, "", new { @class = "text-danger" })
                            <span class="text-right text-primary" id="verifyModel" onclick="VerifyMobileNo()">
                                <button type="button" id="vefifyLink" style="border:none;background:transparent">Verify</button>
                            </span>
                            <span class="text-right text-primary" id="verified">
                                <img src="../images/verified.png" style="width:30px"><span style="color:#00d566;font-weight:600">verified</span>
                            </span>
            </div>
                        <span id="mobilenoerror"></span>
                       
        </div>

        <div class="form-group">

          @*   @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" }) *@

              <div class="form-input">

                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control",placeholder = "Email Id" } })

                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })

            </div>

        </div>
                </div>
                <div class="d-flex">
        <div class="form-group">

           @*  @Html.LabelFor(model => model.hotelName, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                 <div class="form-input">

                 @Html.EditorFor(model => model.hotelName, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Hotel Name" } })

                @Html.ValidationMessageFor(model => model.hotelName, "", new { @class = "text-danger" })

            </div>

        </div>
                <div class="form-group">

                    @*  @Html.LabelFor(model => model.hotelName, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                    <div class="form-input">

                            @Html.EditorFor(model => model.hotelRegNo, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Hotel License Number",@onfocusout="CheckHotelRegNoIsExist()" } })

                        @Html.ValidationMessageFor(model => model.hotelRegNo, "", new { @class = "text-danger" })
                        <span id="hotelregexist"></span>
                    </div>

                    </div>
                </div>

                <div class="d-flex">
                    <div class="form-group" style="width:100% !important;">

                       
                        <div class="form-input" style="width:100%;">

                            @Html.EditorFor(model => model.address, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Hotel Complete Address" } })

                            @Html.ValidationMessageFor(model => model.address, "", new { @class = "text-danger" })

                        </div>

                    </div>
                 
                </div>
                <div class="d-flex">
                    <div class="form-group">


                        <div class="form-input" >

                            @Html.EditorFor(model => model.pinCode, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Pincode" } })

                            @Html.ValidationMessageFor(model => model.pinCode, "", new { @class = "text-danger" })

                        </div>

                    </div>
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model.lat, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Latitude",@readonly="readonly" } })

                            @Html.ValidationMessageFor(model => model.lat, "", new { @class = "text-danger" })

                        </div>

                    </div>
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model._long, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Longitide",@readonly="readonly" } })

                            @Html.ValidationMessageFor(model => model._long, "", new { @class = "text-danger" })
                            <p style="text-align:end;font-size:14px;color:red"> <button type="button" style="border:none;background:transparent" data-toggle="modal" data-target="#myModal">Use My Current Location</button></p>
                           
                        </div>

                    </div>
                </div>

                <div class="d-flex">
        <div class="form-group">
           @*  @Html.LabelFor(model => model.stateId, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                    <div class="form-input">

                <select id="statelist" name="stateId" class="form-control" ></select>
                            @Html.ValidationMessageFor(model => model.stateId, "", new { @class = "text-danger" })

            </div>
        </div>
        <div class="form-group">
           @*  @Html.LabelFor(model => model.distId, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                    <div class="form-input">

                <select id="districtlist" name="distId" class="form-control">
                    <option value="">Select District</option>
                </select>
                            @Html.ValidationMessageFor(model => model.distId, "", new { @class = "text-danger" })
            </div>
        </div>
                </div>
                <div class="d-flex">       
                    <div class="form-group">
        @*     @Html.LabelFor(model => model.cityId, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                    <div class="form-input">

                <select id="citylist" name="cityId" class="form-control">
                                <option value="">Select City</option>
                </select>
                            @Html.ValidationMessageFor(model => model.cityId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
           @*  @Html.LabelFor(model => model.stationCode, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                    <div class="form-input">

                <select id="pslist" name="stationCode" class="form-control">
                                <option value="">Select Police Station</option>
                </select>
                            @Html.ValidationMessageFor(model => model.stationCode, "", new { @class = "text-danger" })
            </div>
        </div>
                </div>
                <div class="d-flex">
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model.userId, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Username",@onfocusout="CheckHotelUsernameExist()" } })

                            @Html.ValidationMessageFor(model => model.userId, "", new { @class = "text-danger" })
                            <span id="hoteluseridexist"></span>
                        </div>
                        <p style="text-align:end;font-size:14px;color:#016fff;">Note: Remember username for login in future.</p>
                    </div>
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model.pass, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Enter Password" } })

                            @Html.ValidationMessageFor(model => model.pass, "", new { @class = "text-danger" })

                        </div>

                    </div>
                </div>
                <div class="d-flex">
                  
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model.cPass, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Re-Enter Password" } })

                            @Html.ValidationMessageFor(model => model.cPass, "", new { @class = "text-danger" })

                        </div>

                    </div>
                </div>
        <div class="">

                    <div class="text-center">

                <input type="submit" value="Create" class="btn btn-default btn-primary" />

            </div>

        </div>

              
            </div>

    </div>
        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Modal Header</h4>
                    </div>
                    <div class="modal-body">
                        <div id="map" style="height: 180px;"></div>
                    </div>
                    <div class="modal-footer">
                         <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
}
<div class="modal fade" id="verifyNo" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*    <button type="button" class="close" data-dismiss="modal">&times;</button> *@
                <h4 class="modal-title text-center"> <span id="sendotpres"></span></h4>
            </div>
          @*   <div class="modal-body" style="margin:auto">
                <input type="number" id="enterotp" placeholder="enter OTP">
                <button class="btn btn-primary" onclick="CheckOTP()">Submit</button>
            </div> *@
            <div class="modal-body" style="margin:auto">
                <form id="otp-form" action="" class="mt-5">
                    <input class="otp" type="text" maxlength="1" pattern="[0-9]" required tabindex="1">
                    <input class="otp" type="text" maxlength="1" pattern="[0-9]" required tabindex="2">
                    <input class="otp" type="text" maxlength="1" pattern="[0-9]" required tabindex="3">
                    <input class="otp" type="text" maxlength="1" pattern="[0-9]" required tabindex="4">
                    <input class="otp" type="text" maxlength="1" pattern="[0-9]" required tabindex="5">
                    <input class="otp" type="text" maxlength="1" pattern="[0-9]" required tabindex="6">


                    <button class='btn btn-primary btn-block mt-4 mb-4 customBtn' type="submit">Verify</button>
                </form>
               
            </div>
        </div>

    </div>
</div>
@* <div>


    @Html.ActionLink("Back to List", "Index")

</div> *@

@* //Using OpenStreet Map *@
@* <script type="text/javascript">
    $(document).ready(function () {
        debugger;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(setDefaultPosition);
        }
        else { x.innerHTML = "Geolocation is not supported by this browser."; }


        function setDefaultPosition(position) {
            var defaultlat = position.coords.latitude;
            var defaultlong = position.coords.longitude;
            var map = L.map('map').setView([defaultlat, defaultlong], 13); // Set initial coordinates and zoom level

            //document.getElementById('lat').value = defaultlat;
            //document.getElementById('zlong').value = defaultlong;

            // Create a base layer with OpenStreetMap tiles
            var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19
            });

            // Create a satellite layer with satellite imagery tiles
            var satelliteLayer = L.tileLayer('https://tiles.wmflabs.org/sat/{z}/{x}/{y}.jpg', {
                maxZoom: 19
            });

            // Create a base layer group with both the OpenStreetMap and satellite layers
            var baseLayers = {
                "Map View": osmLayer,
                "Satellite View": satelliteLayer
            };

            // Add the base layer group to the map and set the Map View as the default
            osmLayer.addTo(map);


            // Initialize a custom marker with a draggable option
            var customIcon = L.icon({
                iconUrl: '../../images/map-marker.png', // Specify the URL to your custom marker icon

                iconSize: [32, 32], // Adjust the size of your custom icon
                iconAnchor: [16, 32], // Adjust the icon's anchor point
            });
            var marker = L.marker([defaultlat, defaultlong], {
                icon: customIcon,
                draggable: true // Make the marker draggable
            }).addTo(map);



            // Attach the dragend event handler to the marker
            marker.on('dragend', onMarkerDrag);
            L.control.layers(baseLayers).addTo(map);
        }



        // Define a function to handle the marker drag event
        function onMarkerDrag(e) {
            var marker = e.target;
            var position = marker.getLatLng();
            alert("Marker dragged to latitude: " + position.lat.toFixed(4) + " and longitude: " + position.lng.toFixed(4));

            document.getElementById('lat').value = position.lat;
            document.getElementById('zlong').value = position.lng;
        }
        // Define a function to handle the onclick event
        function onMapClick(e) {
            alert("You clicked the map at latitude: " + e.latlng.lat.toFixed(4) + " and longitude: " + e.latlng.lng.toFixed(4));
        }


        function latlongsubmit() {

        }
    });
   


</script> *@
@* //Using Google Map *@

<script src="~/js/hotelregistration.js"></script>
@section Scripts {

	@* @Scripts.Render("~/bundles/jqueryval") *@
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
	<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>

}