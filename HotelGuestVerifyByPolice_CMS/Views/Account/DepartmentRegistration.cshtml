@model HotelGuestVerifyByPolice_CMS.Models.DepartmentReg
@{
    ViewBag.Title = "Department Registration";
    Layout = "";
}

<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7w-l0RWEUVqhXyshtsgdkqJDNxaKQ5lY&callback=initMap" async defer></script>

<style>
    wordtune-read-extension {
        display: none !important
    }

    body {
        height: 100%;
        width: 100%;
        background: #ebebeb;
    }

    .px-6 {
        padding-right: 60px;
        padding-left: 60px;
    }

    .nav-bg {
        background-image: linear-gradient( 45deg, hsl(264deg 73% 38%) 0%, hsl(259deg 68% 39%) 16%, hsl(253deg 64% 40%) 32%, hsl(247deg 61% 41%) 49%, hsl(241deg 58% 42%) 66%, hsl(234deg 65% 40%) 83%, hsl(228deg 78% 36%) 100% ) !important;
    }

        .nav-bg p a span {
            color: #fff !important;
            font-size: 18px;
            font-weight: 600;
        }

    .form-control {
        border: none !important;
        border-bottom: 1px solid #787878 !important;
        border-radius: 0px !important;
        /*  color: #9979f6 !important; */
        margin-right: 5% !important;
        margin-bottom: 18px;
    }

    .form-group {
        width: 45% !important;
        margin-right: 5% !important;
    }

    #form-heading {
        margin-left: 20px;
        color: #fff;
        background: #4594fc;
        margin-bottom: 0px;
        width: 25%;
        padding: 10px;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
        padding-left: 25px;
    }

    .form-control:focus {
        color: #212529;
        background-color: #fff !important;
        border-color: none;
        outline: 0;
        box-shadow: none !important;
        border-bottom: 2px solid #9979f6 !important;
    }

    ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
        color: #212529 !important;
        opacity: 1; /* Firefox */
    }

    .modal-open .modal {
        top: 25%;
    }

    input[type=checkbox] {
        display: none;
    }

    #verified {
        display: none;
        position: absolute;
        top: 5px;
        right: 0px;
    }
    #verifyModel{
        position: absolute;
        top: 5px;
        right: 0px;
    }
    
</style>

@using (Html.BeginForm())

{

    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="background:#ebebeb;padding-bottom:20px">

        <div class="px-6 nav-bg" style="width:100%;height:50px">
            <p class="d-flex justify-content-between pt-3">
                <a href="../home">   <span>Home</span></a>
                <a href="./DepartmentLogin"> <span>Login</span></a>
            </p>

        </div>


        <div class="px-6 pt-3">
            <h4 id="form-heading">New Department Registration</h4>
            <div style="background:#fff;border-radius:5px" class="px-5 py-4">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="d-flex">
                    <div class="form-group">

                      
                        <div class="form-input">

                            @Html.EditorFor(model => model.userId, new { htmlAttributes = new { @class = "form-control",placeholder = "User Name",@onfocusout="CheckDepartUsernameIsExist()" } })

                            @Html.ValidationMessageFor(model => model.userId, "", new { @class = "text-danger" })
                            <span id="departusernameexist"></span>
                        </div>

                    </div>

                    <div class="form-group">

                        @*  @Html.LabelFor(model => model.hotelName, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            <select id="userList" name="userType" class="form-control">
                                <option value="">User Type</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.userType, "", new { @class = "text-danger" })
                        </div>

                    </div>
                </div>
                <div class="d-flex">

                    <div class="form-group">

                        @*    @Html.LabelFor(model => model.mobile, htmlAttributes: new { @class = "control-label col-md-2" }) *@
                       
                        <input type="hidden" id="getotp" value="" />
                        <div class="form-input" style="position:relative">

                            @Html.EditorFor(model => model.mobile, new { htmlAttributes = new { @class = "form-control",placeholder = "Mobile Number",minlength = "10", maxlength = "10"  } })
                            @Html.CheckBoxFor(model => model.isMobileVerify, new { htmlAttributes = new { style = "display:none"} })
                            @Html.ValidationMessageFor(model => model.mobile, "", new { @class = "text-danger" })
                            @Html.ValidationMessageFor(model => model.isMobileVerify, "", new { @class = "text-danger" })
                            <span class="text-right text-primary" id="verifyModel" onclick="VerifyMobileNo()">
                                <button type="button" id="vefifyLink" style="border:none;background:transparent" data-toggle="modal" data-target="#verifyNo" data-backdrop="static" data-keyboard="false">Verify</button>
                            </span>
                            <span class="text-right text-primary" id="verified">
                                <img src="../images/verified.png" style="width:30px"><span style="color:#00d566;font-weight:600">verified</span>
                            </span>
                        </div>
                        <span id="mobilenoerror"></span>

                    </div>

                    <div class="form-group">

                        @*   @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control",placeholder = "Email Id" } })

                            @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })

                        </div>

                    </div>
                </div>
                <div class="d-flex">
               
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model.lat, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Latitude" } })

                            @Html.ValidationMessageFor(model => model.lat, "", new { @class = "text-danger" })

                        </div>

                    </div>
              
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model._long, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Longitide" } })

                            @Html.ValidationMessageFor(model => model._long, "", new { @class = "text-danger" })
                            <p style="text-align:end;font-size:14px;color:red"> <button type="button" style="border:none;background:transparent" data-toggle="modal" data-target="#myModal">Use My Current Location</button></p>

                        </div>

                    </div>

                </div>
            

                <div class="d-flex">
                    <div class="form-group">
                        @*  @Html.LabelFor(model => model.stateId, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            <select id="statelist" name="stateId" class="form-control"></select>
                            @Html.ValidationMessageFor(model => model.stateId, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="form-group">
                        @*  @Html.LabelFor(model => model.distId, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            <select id="districtlist" name="distId" class="form-control">
                                <option value="">Select District</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.distId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="d-flex">
                    <div class="form-group">
                        @*     @Html.LabelFor(model => model.cityId, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            <select id="citylist" name="cityId" class="form-control">
                                <option value="">Select City</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.cityId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @*  @Html.LabelFor(model => model.stationCode, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            <select id="pslist" name="stationCode" class="form-control">
                                <option value="">Select Police Station</option>
                            </select>
                            @Html.ValidationMessageFor(model => model.stationCode, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="d-flex">

                    <div class="form-group">

                        <div class="form-input" style="position:relative">

                            @Html.EditorFor(model => model.password, new { htmlAttributes = new { @class = "form-control",placeholder = "Enter Password"} })

                            @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                          
                        </div>
                       

                    </div>

                    <div class="form-group">

                        @*   @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" }) *@

                        <div class="form-input">

                            @Html.EditorFor(model => model.cPassword, new { htmlAttributes = new { @class = "form-control",placeholder = "Enter Confirm Password" } })

                            @Html.ValidationMessageFor(model => model.cPassword, "", new { @class = "text-danger" })

                        </div>

                    </div>
                </div>
               @*  <div class="d-flex">
                    <div class="form-group">


                        <div class="form-input">

                            @Html.EditorFor(model => model.userId, new { htmlAttributes = new { @class = "form-control" ,placeholder = "Username" } })

                            @Html.ValidationMessageFor(model => model.userId, "", new { @class = "text-danger" })

                        </div>
                        <p style="text-align:end;font-size:14px;color:#016fff;">Note: Remember username for login in future.</p>
                    </div>

                </div> *@
                <div class="">

                    <div class="text-center">

                        <input type="submit" value="Create" class="btn btn-default btn-primary" />

                    </div>

                </div>

            </div>
            </div>

        </div>
        <!-- Modal -->
        <div class="modal fade" id="myModal" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content">
                    <div class="modal-header">
                     @*    <button type="button" class="close" data-dismiss="modal">&times;</button> *@
                        <h4 class="modal-title text-center">Modal Header</h4>
                    </div>
                    <div class="modal-body">
                        <div id="map" style="height: 180px;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        </div>

   
}

<div class="modal fade" id="verifyNo" role="dialog">
    <div class="modal-dialog">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                @*    <button type="button" class="close" data-dismiss="modal">&times;</button> *@
                <h4 class="modal-title text-center"> <span id="sendotpres"></span></h4>
            </div>
            <div class="modal-body" style="margin:auto">
                <input type="number" id="enterotp" placeholder="enter OTP">
                <button class="btn btn-primary" onclick="CheckOTP()">Submit</button>
            </div>

        </div>

    </div>
</div>
@* <div>


    @Html.ActionLink("Back to List", "Index")

</div> *@
@* 
//Using OpenStreet Map *@
@* <script type="text/javascript">
    $(document).ready(function () {
        debugger;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(setDefaultPosition);
        }
        else { x.innerHTML = "Geolocation is not supported by this browser."; }


        function setDefaultPosition(position) {
            var defaultlat = position.coords.latitude;
            var defaultlong = position.coords.longitude;
            var map = L.map('map').setView([defaultlat, defaultlong], 13); // Set initial coordinates and zoom level

            //document.getElementById('lat').value = defaultlat;
            //document.getElementById('zlong').value = defaultlong;

            // Create a base layer with OpenStreetMap tiles
            var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19
            });

            // Create a satellite layer with satellite imagery tiles
            var satelliteLayer = L.tileLayer('https://tiles.wmflabs.org/sat/{z}/{x}/{y}.jpg', {
                maxZoom: 19
            });

            // Create a base layer group with both the OpenStreetMap and satellite layers
            var baseLayers = {
                "Map View": osmLayer,
                "Satellite View": satelliteLayer
            };

            // Add the base layer group to the map and set the Map View as the default
            osmLayer.addTo(map);


            // Initialize a custom marker with a draggable option
            var customIcon = L.icon({
                iconUrl: '../../images/map-marker.png', // Specify the URL to your custom marker icon

                iconSize: [32, 32], // Adjust the size of your custom icon
                iconAnchor: [16, 32], // Adjust the icon's anchor point
            });
            var marker = L.marker([defaultlat, defaultlong], {
                icon: customIcon,
                draggable: true // Make the marker draggable
            }).addTo(map);



            // Attach the dragend event handler to the marker
            marker.on('dragend', onMarkerDrag);
            L.control.layers(baseLayers).addTo(map);
        }



        // Define a function to handle the marker drag event
        function onMarkerDrag(e) {
            var marker = e.target;
            var position = marker.getLatLng();
            alert("Marker dragged to latitude: " + position.lat.toFixed(4) + " and longitude: " + position.lng.toFixed(4));

            document.getElementById('lat').value = position.lat;
            document.getElementById('zlong').value = position.lng;
        }
        // Define a function to handle the onclick event
        function onMapClick(e) {
            alert("You clicked the map at latitude: " + e.latlng.lat.toFixed(4) + " and longitude: " + e.latlng.lng.toFixed(4));
        }


        function latlongsubmit() {

        }
    });



</script> *@
@* //Using Google Map *@

<script type="text/javascript" >
    debugger;
    var map;
    var marker;
    var userCoordinates;

    function initMap() {
        debugger;
      @*   // Set initial coordinates as the center and zoom level *@

        // Check if the Geolocation API is available
        if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(function (position) {
                userCoordinates = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                // Create a map with the specified options after obtaining user's coordinates
                map = new google.maps.Map(document.getElementById('map'), {
                    center: userCoordinates,
                    zoom: 13
                });

                // Specify the icon size using the iconSize property
                var customIcon = {
                    url: '../../images/pin-point.png', // Specify the URL to your custom marker icon
                    scaledSize: new google.maps.Size(32, 32), // Set the size of the icon (e.g., 32x32 pixels)
                };
                // Create a custom marker
                marker = new google.maps.Marker({
                    position: userCoordinates,
                    map: map,
                    icon: customIcon, // Specify the URL to your custom marker icon
                    draggable: true // Make the marker draggable
                });

                // Add a listener for the marker drag event
                google.maps.event.addListener(marker, 'dragend', function () {
                    var newPosition = marker.getPosition();
                    document.getElementById('lat').value = newPosition.lat().toFixed(4);
                    document.getElementById('zlong').value = newPosition.lng().toFixed(4);
                    alert("Marker dragged to latitude: " + newPosition.lat().toFixed(4) + " and longitude: " + newPosition.lng().toFixed(4));
                });

                // Create map type controls for switching between Map View and Satellite View
                var mapTypeControlDiv = document.createElement('div');
                var mapTypeControl = new MapTypeControl(mapTypeControlDiv, map);

                map.controls[google.maps.ControlPosition.TOP_RIGHT].push(mapTypeControlDiv);

            }, function (error) {
                handleGeolocationError(error);
            });
        } else {
            // Geolocation is not available in this browser
            console.error("Geolocation is not available.");
        }

    }
   @*  // Define a custom control for switching between Map View and Satellite View *@
    function MapTypeControl(controlDiv, map) {
        controlDiv.style.padding = '10px';

        var mapTypeControlUI = document.createElement('div');
        mapTypeControlUI.style.backgroundColor = 'white';
        mapTypeControlUI.style.border = '2px solid #ccc';
        mapTypeControlUI.style.borderRadius = '3px';
        mapTypeControlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,0.3)';
        mapTypeControlUI.style.cursor = 'pointer';
        mapTypeControlUI.style.textAlign = 'center';
        mapTypeControlUI.title = 'Click to toggle Map/Satellite View';
        controlDiv.appendChild(mapTypeControlUI);

        var mapTypeControlText = document.createElement('div');
        mapTypeControlText.style.fontFamily = 'Arial,sans-serif';
        mapTypeControlText.style.fontSize = '12px';
        mapTypeControlText.style.padding = '5px 10px';
        mapTypeControlText.innerHTML = 'Map View';
        mapTypeControlUI.appendChild(mapTypeControlText);

        mapTypeControlUI.addEventListener('click', function () {
            toggleMapType();
        });

        function toggleMapType() {
            if (map.getMapTypeId() === google.maps.MapTypeId.ROADMAP) {
                map.setMapTypeId(google.maps.MapTypeId.HYBRID);
                mapTypeControlText.innerHTML = 'Satellite View';
            } else {
                map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
                mapTypeControlText.innerHTML = 'Map View';
            }
        }
    }


    function handleGeolocationError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                console.error("User denied the request for Geolocation.");
                break;
            case error.POSITION_UNAVAILABLE:
                console.error("Location information is unavailable.");
                break;
            case error.TIMEOUT:
                console.error("The request to get user location timed out.");
                break;
            case error.UNKNOWN_ERROR:
            default:
                console.error("An unknown error occurred while getting user location.");
                break;
        }
    }

</script>
<script>

    $('#userList').on('change', function () {

         if (this.value == '1') {
           
            $('#districtlist').prop('disabled', true);
            $('#citylist').prop('disabled', true);
            $('#pslist').prop('disabled', true);
        };
        if (this.value == '2') {
            $('#districtlist').prop('disabled', false);
            $('#citylist').prop('disabled', true);
            $('#pslist').prop('disabled', true);
        };
        if (this.value == '3') {
            $('#districtlist').prop('disabled', false);
            $('#citylist').prop('disabled', false);
            $('#pslist').prop('disabled', true);
        };
        if (this.value == '4') {
            $('#districtlist').prop('disabled', false);
            $('#citylist').prop('disabled', false);
            $('#pslist').prop('disabled', false);
        };
    });
    $("#mobile").keypress(function () {
       

            $('#vefifyLink').prop('disabled', false);
     
       
    });
 
    function VerifyMobileNo() {
      
        debugger;
        if ($('#mobile').val() == null || $('#mobile').val() == "") {
            $('#vefifyLink').prop('disabled', true);
            $('#mobilenoerror').text("Please Enter Mobile No.");
            let mobilenoerror = document.getElementById("mobilenoerror");
            mobilenoerror.style.color = 'red';
           
        }
        else {

            var phoneno = /^\d{10}$/;

            if ($('#mobile').val().match(phoneno)) {
                let mobilenoerror = document.getElementById("mobilenoerror");
                mobilenoerror.style.display = 'none';


                $.ajax({
                    type: "post",
                    url: "/Account/VerifyMoNo",
                    data: { mobileno: $('#mobile').val() },
                    datatype: "json",
                    traditional: true,
                    success: function (data) {
                        json = JSON.parse(data);
                        console.log(json.message);
                        document.getElementById("getotp").value = json.otp;

                        let button = document.getElementById("sendotpres");
                        button.style.display = "block";
                        if (json.status == "success") { // if button color is red change it green otherwise change it to red.
                            button.style.color = 'green';
                        } else {
                            button.style.color = 'red';
                        }
                        $('#sendotpres').text(json.message);
                    }
                });
            }
            else {
                alert('Invalid Mobile Number')
                
            }
        }
    }

    function CheckOTP() {
        debugger;
        var otp1 = document.getElementById("getotp").value;
        var otp2 = document.getElementById("enterotp").value;

        if (otp1 == otp2) {
            document.getElementById("isMobileVerify").checked = true;

            $("#verifyNo").modal('hide');
            $('#verifyModel').hide();
            $('#verified').show();
        } else {
            alert('otp is wrong')
        }
        
    }
    function CheckDepartUsernameIsExist() {
        debugger;
        var duserid = $('#userId').val();
        if (duserid.length > 1) {
            $.ajax({
                type: "post",
                url: "/Account/CheckDepartUsername",
                data: { dusername: $('#userId').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    json = JSON.parse(data);
                    console.log(json.message);
                    var myfield = $('#userId');
                    myfield.removeClass('field-validation-error');
                    myfield.next('span[data-valmsg-for]').removeClass("field-validation-error").addClass("field-validation-valid").html("");

                    let button = document.getElementById("departusernameexist");
                    button.style.display = "block";
                    if (json.status == "success") { // if button color is red change it green otherwise change it to red.
                        button.style.color = 'green';
                    } else {
                        button.style.color = 'red';
                    }
                    $('#departusernameexist').text(json.message);
                }
            });
       }
         
           
    }


</script>
<script>


    $(document).ready(function () {
      

        // For loading all Active DepartmentType
        $.ajax({
            type: "post",
            url: "/States/deptTypeList",
            datatype: "json",
            traditional: true,
            success: function (data) {
                //console.log(data);
                userList = '<option value="">Select Department Type</option>';
                for (var i = 0; i < data.length; i++) {
                    userList = userList + '<option value=' + data[i].departmentTypeID + '>' + data[i].departmentTypeName + '</option>';
                }
               
                $('#userList').html(userList);
            }
        });


        $("#mobile").keypress(function (e) {
            //if the letter is not digit then display error and don't type anything
            if (e.which != 8 && e.which != 0 && (e.which < 48 || e.which > 57) && e.which != 44) {
                //display error message
                //$("#err_mobile").html("केवल अंक | Digits Only").show().delay(1500).show().fadeOut('slow');
                $("#err_mobile").html("Digits Only").show().delay(1500).show().fadeOut('slow');
                return false;
            }
        });
        // For loading all Active States
        $.ajax({
            type: "post",
            url: "/States/StateList",
            datatype: "json",
            traditional: true,
            success: function (data) {
                //console.log(data);
                statelist = '<option value="">Select State</option>';
                for (var i = 0; i < data.length; i++) {
                    statelist = statelist + '<option value=' + data[i].stateId + '>' + data[i].stateName + '</option>';
                }
                //district = district + '</select>';
                $('#statelist').html(statelist);
            }
        });



        // for loading District List
        $('#statelist').change(function () {


            $.ajax({
                type: "post",
                url: "/States/DistrictList",
                data: { stateID: $('#statelist').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    // console.log("Selected State Id:" + $('#statelist').val());
                    // console.log(data);
                    var distlist = '<option value="-1">Select District</option>';
                    for (var i = 0; i < data.length; i++) {
                        distlist = distlist + '<option value=' + data[i].distId + '>' + data[i].distName + '</option>';
                    }
                    $('#districtlist').html(distlist);
                }
            });

        });

        // for loading City List
        $('#districtlist').change(function () {


            $.ajax({
                type: "post",
                url: "/States/CityList",
                data: { 'stateID': $('#statelist').val(), 'distID': $('#districtlist').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    // console.log("Selected State Id:" + $('#statelist').val());
                    // console.log(data);
                    var citylist = '<option value="-1">Select City</option>';
                    for (var i = 0; i < data.length; i++) {
                        citylist = citylist + '<option value=' + data[i].cityId + '>' + data[i].cityName + '</option>';
                    }
                    $('#citylist').html(citylist);
                }
            });

        });

        // for loading Police Station List
        $('#citylist').change(function () {


            $.ajax({
                type: "post",
                url: "/States/PoliceStationList",
                data: { 'stateID': $('#statelist').val(), 'distID': $('#districtlist').val(), 'cityID': $('#citylist').val() },
                datatype: "json",
                traditional: true,
                success: function (data) {
                    // console.log("Selected State Id:" + $('#statelist').val());
                    // console.log(data);
                    var pslist = '<option value="-1">Select Police Station</option>';
                    for (var i = 0; i < data.length; i++) {
                        pslist = pslist + '<option value=' + data[i].stationID + '>' + data[i].stationName + '</option>';
                    }
                    $('#pslist').html(pslist);
                }
            });

        });
    });




</script>
@section Scripts {

    @* @Scripts.Render("~/bundles/jqueryval") *@
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>

}
